SET SERVEROUTPUT ON;

CREATE TABLE xPeople (
    pID INT    GENERATED BY DEFAULT ON NULL AS IDENTITY    PRIMARY KEY,
    firstName VARCHAR(25) NOT NULL,
    lastName VARCHAR(25) NOT NULL,
    DOB DATE,
    isActive NUMERIC(1) DEFAULT 1 NOT NULL,
    favNum INT CHECK (favNum BETWEEN 0 AND 99)
    );



CREATE OR REPLACE PROCEDURE spInsertPeople (
            firstName VARCHAR2,
            lastName VARCHAR2,
            DOB date,
            isActive NUMERIC,
            favNum INT
) AS
BEGIN
            INSERT INTO xPeople p(
                    p.firstName, p.lastName, p.dob, p.isactive, p.favNum)
            VALUES (firstName, lastName, DOB, isActive, favNum);
            DBMS_OUTPUT.PUT_LINE('Insert successful!');
EXCEPTION
            WHEN OTHERS
                    THEN 
                            DBMS_OUTPUT.PUT_LINE('An error occured!');
END spInsertPeople;

--execute it

BEGIN
        spInsertPeople('Jonas', 'Smith', sysdate, 1,13);
END;

--another exp

CREATE OR REPLACE PROCEDURE spInsertPeople2 (
          firstName VARCHAR2,
            lastName VARCHAR2,
            DOB date,
            isActive IN NUMERIC,
            favNum IN INT,
            peepID OUT INT
) AS
BEGIN
            INSERT INTO xPeople p(
                    p.firstName, p.lastName, p.dob, p.isactive, p.favNum)
            VALUES (firstName, lastName, DOB, isActive, favNum);
            
            SELECT pID INTO peepID
            FROM xPeople
            WHERE rownum = 1
            ORDER BY pID DESC;
            DBMS_OUTPUT.PUT_LINE('Insert successful!');
EXCEPTION
            WHEN OTHERS
                    THEN 
                            DBMS_OUTPUT.PUT_LINE('An error occured!');   
END spInsertPeople2;

--execute it

DECLARE
    NewPeepID INT := 0;

BEGIN
        spInsertPeople2('Elissa', 'Pendergast', sysdate, 1, 66, NewPeepID);
        
        DBMS_OUTPUT.PUT_LINE('New PeepID : ' || NewPeepID);   
END;
--another exmp

CREATE OR REPLACE PROCEDURE spInsertPeople3 (
          firstName VARCHAR2,
            lastName VARCHAR2,
            DOB date,
            isActive IN NUMERIC,
            favNum IN INT,
            peepID OUT INT,
            NumPeeps OUT INT
) AS
BEGIN
            INSERT INTO xPeople p(
                    p.firstName, p.lastName, p.dob, p.isactive, p.favNum)
            VALUES (firstName, lastName, DOB, isActive, favNum);
            
            SELECT pID INTO peepID
            FROM xPeople
            WHERE rownum = 1
            ORDER BY pID DESC;
            
            SELECT COUNT(pID) INTO NumPeeps From xPeople;
            
            DBMS_OUTPUT.PUT_LINE('Insert successful!');
EXCEPTION
            WHEN OTHERS
                    THEN 
                            DBMS_OUTPUT.PUT_LINE('An error occured!');   
END spInsertPeople3;

--execute it

DECLARE
        NewPeepID INT := 0;
        NumPeeps INT :=0;
BEGIN 
        spInsertPeople3('Anka', 'Gumus', sysdate, 1,4,NewPeepID, NumPeeps);
        DBMS_OUTPUT.PUT_LINE('New PeepID : ' || NewPeepID);   
        DBMS_OUTPUT.PUT_LINE('Number of rows : ' || NumPeeps);   
END;

--IN OUT PARAMs

CREATE OR REPLACE PROCEDURE spNewSalary (salary IN OUT FLOAT) AS
BEGIN
        salary := salary * 1.2;
END spNewSalary;

-- execute it

DECLARE 
            mySalary FLOAT := ROUND(74500.43/12,2);
            
BEGIN
        DBMS_OUTPUT.PUT_LINE('The old salary :  $' || mySalary);
        spNewSalary(mySalary);
        DBMS_OUTPUT.PUT_LINE('The new salary :  $' || mySalary); 
END;

--conditional statements
--and explicit cursors

--sp to delete people and return the results of the deletion

CREATE OR REPLACE PROCEDURE spDelPeep (peepID xPeople.pid%type) AS
--%type gets the data type of the left side
BEGIN
            DELETE FROM xPeople WHERE pID = peepID;
            --%ROWCOUNT GIVES YOU NUMBER OF ROWS AFFECTED BY THE PREVIOUS STATEMENT
            IF SQL%ROWCOUNT = 0 THEN
                    DBMS_OUTPUT.PUT_LINE('pID ' || peepID || ' did not exist'); 
            ELSIF SQL%ROWCOUNT = 1 THEN
                    DBMS_OUTPUT.PUT_LINE('pID ' || peepID || ' deleted successfully!'); 
            ELSE
                    DBMS_OUTPUT.PUT_LINE('Multiple rows deleted - WARNING! ! ! ! !'); 
            END IF;
END;

--execute it

BEGIN 
        spDelPeep(3);
END;

--EXAMPLE OF BASIC LOOP

DECLARE
        curNum INT := 0;
        maxNum INT := 31;
BEGIN
        DBMS_OUTPUT.PUT_LINE('--------------------------------------------------'); 
        LOOP
                    DBMS_OUTPUT.PUT_LINE('Power: ' || curNum || ' - ' || POWER(2, curNum));
                    curNum := curNum + 1;
                    EXIT WHEN curNum > maxNum;      
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('---------------------------------------------------');
END;

--nested loops

--EXAMPLE OF NESTED BASIC LOOP

DECLARE
        r NUMBER := 0;
        c NUMBER := 0;
        maxNum NUMBER := &Num;
        rowString VARCHAR2(255) := ' ';
BEGIN
        DBMS_OUTPUT.PUT_LINE('--------------------------------------------------'); 
        LOOP-- rows
                rowString := LPAD(r, 3, ' ') || ' - ';
                LOOP
                    rowString := rowString || LPAD(r * c, 4, ' ');
                    c:=c+1;
                    EXIT WHEN c > maxNum;      
        END LOOP;
        c:=0;
        r:=r+1;
        DBMS_OUTPUT.PUT_LINE(rowString);
        EXIT WHEN r > maxNum;   
    END LOOP;
END;

-- contunie and contunie when

DECLARE
        Counter INT := 0;
        eNum INT := 10;
BEGIN
        DBMS_OUTPUT.PUT_LINE('--------------------------------------------------'); 
        LOOP
                    Counter := Counter +1;
                    CONTINUE WHEN Counter = 3; -- will skip when counter is 3 
                    DBMS_OUTPUT.PUT_LINE('- ' || Counter || ' - ');
                    EXIT WHEN Counter >= eNum;
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('--------------------------------------------------'); 
END;

-- for loop

BEGIN
        FOR i IN 0..10 LOOP 
                DBMS_OUTPUT.PUT_LINE(i);
        END LOOP;
END;

--IN REVERSE
BEGIN
        FOR i IN REVERSE 0..10 LOOP 
                DBMS_OUTPUT.PUT_LINE(i);
        END LOOP;
END;

--WHILE LOOP

DECLARE 
        i INT := 0;
        maxNum INT := 10;
BEGIN
        WHILE i <= maxNum LOOP
                DBMS_OUTPUT.PUT_LINE('- ' || i || ' -');
                i := i + 1;
        END LOOP;
END;




CREATE OR REPLACE PROCEDURE spUpdate_Salary_By_Dept (
    deptID IN employees.department_id%type,
    raiseAmt IN employees.salary%type ) AS
BEGIN
    UPDATE employees e
        SET salary = salary * (1 + raiseAmt / 100)
        WHERE department_ID = deptID;
    
    IF SQL%ROWCOUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE ('No records where found in that category, no records updated.');
    ELSE DBMS_OUTPUT.PUT_LINE (SQL%ROWCOUNT || ' records updated.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('An error occured! ******* ');
END spUpdate_Salary_By_Dept;
/
-- Execute Q3
    BEGIN
        spUpdate_Salary_By_Dept(50,2.5);
    
    END;



